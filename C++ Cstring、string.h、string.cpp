// cstring/string.h/string头文件函数详解 
// 整理：ZJL/ChatGPT 

/*
1. length()
   - 功能：返回字符串的长度（字符数）。
   - 详解：该函数返回字符串的长度，即字符串中的字符数，不包括终止符'\0'。
   - 使用方法：可以通过调用字符串对象的length()方法来获取字符串的长度。
   - 使用案例：例如，对于字符串"Hello"，length()函数将返回5。

2. substr()
   - 功能：从字符串中提取子字符串。
   - 详解：该函数返回一个新的字符串，其中包含从指定位置开始的指定长度的字符。
   - 使用方法：可以通过调用字符串对象的substr()方法来提取子字符串。
   - 使用案例：例如，对于字符串"Hello, World!"，substr(7, 5)将返回"World"。

3. strlen()
   - 功能：返回C风格字符串的长度（字符数）。
   - 详解：该函数返回C风格字符串的长度，即字符串中的字符数，不包括终止符'\0'。
   - 使用方法：可以通过传入C风格字符串作为参数来调用strlen()函数。
   - 使用案例：例如，对于字符串"Hello"，strlen("Hello")将返回5。

4. strcmp()
   - 功能：比较两个字符串。
   - 详解：该函数比较两个字符串的大小。如果两个字符串相等，则返回0；如果第一个字符串小于第二个字符串，则返回负数；如果第一个字符串大于第二个字符串，则返回正数。
   - 使用方法：可以通过传入两个字符串作为参数来调用strcmp()函数。
   - 使用案例：例如，strcmp("Hello", "World")将返回一个负数。

5. strcat()
   - 功能：将两个字符串拼接在一起。
   - 详解：该函数将第二个字符串的内容追加到第一个字符串的末尾，并返回拼接后的字符串。
   - 使用方法：可以通过传入两个字符串作为参数来调用strcat()函数。
   - 使用案例：例如，strcat("Hello", "World")将返回"HelloWorld"。
6. strcpy()
   - 功能：将一个字符串复制到另一个字符串。
   - 详解：该函数将源字符串的内容复制到目标字符串中，并返回目标字符串的指针。
   - 使用方法：可以通过传入源字符串和目标字符串作为参数来调用strcpy()函数。
   - 使用案例：例如，strcpy(dest, src)将把src字符串的内容复制到dest字符串中。

7. sscanf()
   - 功能：从字符串中按照指定格式解析数据。
   - 详解：该函数根据指定的格式字符串，从输入字符串中提取数据并将其存储到指定的变量中。
   - 使用方法：可以通过传入格式字符串和输入字符串作为参数来调用sscanf()函数。
   - 使用案例：例如，sscanf("42 3.14", "%d %f", &num, &f)将把字符串中的整数和浮点数解析到num和f变量中。

8. sprintf()
   - 功能：根据指定格式将数据格式化为字符串。
   - 详解：该函数根据指定的格式字符串，将数据格式化为字符串并存储到指定的缓冲区中。
   - 使用方法：可以通过传入格式字符串和变量作为参数来调用sprintf()函数。
   - 使用案例：例如，sprintf(buffer, "The value is %d", value)将把value的值格式化为字符串并存储到buffer中。

9. find()
   - 功能：在字符串中查找指定子字符串。
   - 详解：该函数在字符串中查找指定的子字符串，并返回第一次出现的位置。如果未找到子字符串，则返回一个特殊值string::npos。
   - 使用方法：可以通过调用字符串对象的find()方法来查找子字符串。
   - 使用案例：例如，对于字符串"Hello, World!"，find("World")将返回7。

10. strchr()
    - 功能：在字符串中查找指定字符的第一次出现。
    - 详解：该函数在字符串中查找指定字符的第一次出现，并返回该字符的指针。如果未找到字符，则返回空指针。
    - 使用方法：可以通过传入字符和字符串作为参数来调用strchr()函数。
    - 使用案例：例如，strchr("Hello", 'e')将返回指向字符'e'的指针。
11. strstr()
    - 功能：在字符串中查找指定子字符串的第一次出现。
    - 详解：该函数在字符串中查找指定的子字符串的第一次出现，并返回该子字符串的指针。如果未找到子字符串，则返回空指针。
    - 使用方法：可以通过传入两个字符串作为参数来调用strstr()函数。
    - 使用案例：例如，strstr("Hello, World!", "World")将返回指向子字符串"World"的指针。

12. strtok()
    - 功能：将字符串分割为多个子字符串。
    - 详解：该函数将字符串按照指定的分隔符进行分割，并返回分割后的第一个子字符串的指针。之后可以通过多次调用该函数获取后续的子字符串。
    - 使用方法：可以通过传入字符串和分隔符作为参数来调用strtok()函数。
    - 使用案例：例如，strtok("Hello, World!", ",")将返回指向子字符串"Hello"的指针。

13. tolower()
    - 功能：将字符转换为小写字母。
    - 详解：该函数将指定的字符转换为小写字母，并返回转换后的字符。
    - 使用方法：可以通过传入字符作为参数来调用tolower()函数。
    - 使用案例：例如，tolower('A')将返回字符'a'。

14. toupper()
    - 功能：将字符转换为大写字母。
    - 详解：该函数将指定的字符转换为大写字母，并返回转换后的字符。
    - 使用方法：可以通过传入字符作为参数来调用toupper()函数。
    - 使用案例：例如，toupper('a')将返回字符'A'。

15. isdigit()
    - 功能：检查字符是否为数字。
    - 详解：该函数检查指定的字符是否为数字，如果是数字则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用isdigit()函数。
    - 使用案例：例如，isdigit('5')将返回非零值。
16. isalpha()
    - 功能：检查字符是否为字母。
    - 详解：该函数检查指定的字符是否为字母，如果是字母则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用isalpha()函数。
    - 使用案例：例如，isalpha('A')将返回非零值。

17. isalnum()
    - 功能：检查字符是否为字母或数字。
    - 详解：该函数检查指定的字符是否为字母或数字，如果是字母或数字则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用isalnum()函数。
    - 使用案例：例如，isalnum('5')将返回非零值。

18. islower()
    - 功能：检查字符是否为小写字母。
    - 详解：该函数检查指定的字符是否为小写字母，如果是小写字母则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用islower()函数。
    - 使用案例：例如，islower('a')将返回非零值。

19. isupper()
    - 功能：检查字符是否为大写字母。
    - 详解：该函数检查指定的字符是否为大写字母，如果是大写字母则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用isupper()函数。
    - 使用案例：例如，isupper('A')将返回非零值。

20. isxdigit()
    - 功能：检查字符是否为十六进制数字。
    - 详解：该函数检查指定的字符是否为十六进制数字，如果是十六进制数字则返回非零值，否则返回0。
    - 使用方法：可以通过传入字符作为参数来调用isxdigit()函数。
    - 使用案例：例如，isxdigit('F')将返回非零值。

append:no.2

1. remove()
    - 功能：从字符串中删除指定字符。
    - 详解：该函数从字符串中删除所有与指定字符相等的字符，并返回删除后的字符串。
    - 使用方法：可以通过传入字符串和要删除的字符作为参数来调用remove()函数。
    - 使用案例：例如，remove("Hello, World!", 'o')将返回字符串"Hell, Wrld!"。

2. reserve()
    - 功能：请求字符串预留一定的空间。
    - 详解：该函数请求字符串预留至少指定数量的字符空间，以便在不重新分配内存的情况下存储更多的字符。
    - 使用方法：可以通过传入字符串要预留的字符数量作为参数来调用reserve()函数。
    - 使用案例：例如，reserve("Hello", 10)将请求字符串预留至少10个字符的空间。

3. append()
    - 功能：将字符串追加到当前字符串的末尾。
    - 详解：该函数将指定的字符串追加到当前字符串的末尾，并返回追加后的字符串。
    - 使用方法：可以通过传入当前字符串和要追加的字符串作为参数来调用append()函数。
    - 使用案例：例如，append("Hello", " World!")将返回字符串"Hello World!"。

4. assign()
    - 功能：用指定的字符串替换当前字符串。
    - 详解：该函数用指定的字符串替换当前字符串，并返回替换后的字符串。
    - 使用方法：可以通过传入当前字符串和要替换的字符串作为参数来调用assign()函数。
    - 使用案例：例如，assign("Hello", "Goodbye")将返回字符串"Goodbye"。

5. back()
    - 功能：返回字符串的最后一个字符。
    - 详解：该函数返回字符串的最后一个字符。
    - 使用方法：可以通过调用back()函数来获取字符串的最后一个字符。
    - 使用案例：例如，back("Hello")将返回字符'o'。

6. clear()
    - 功能：清空字符串。
    - 详解：该函数清空字符串，将字符串的长度设置为0。
    - 使用方法：可以通过调用clear()函数来清空字符串。
    - 使用案例：例如，clear("Hello")将将字符串的长度设置为0。

7. cend()
    - 功能：返回一个常量迭代器，指向字符串的末尾。
    - 详解：该函数返回一个常量迭代器，指向字符串的末尾。
    - 使用方法：可以通过调用cend()函数来获取一个常量迭代器，指向字符串的末尾。
    - 使用案例：例如，cend("Hello")将返回一个常量迭代器。

8. cbegin()
    - 功能：返回一个常量迭代器，指向字符串的开头。
    - 详解：该函数返回一个常量迭代器，指向字符串的开头。
    - 使用方法：可以通过调用cbegin()函数来获取一个常量迭代器，指向字符串的开头。
    - 使用案例：例如，cbegin("Hello")将返回一个常量迭代器。

9. begin()
    - 功能：返回一个迭代器，指向字符串的开头。
    - 详解：该函数返回一个迭代器，指向字符串的开头。
    - 使用方法：可以通过调用begin()函数来获取一个迭代器，指向字符串的开头。
    - 使用案例：例如，begin("Hello")将返回一个迭代器。

10. compare()
    - 功能：比较两个字符串。
    - 详解：该函数比较两个字符串，并根据比较结果返回一个整数。如果字符串相等，则返回0；如果当前字符串小于另一个字符串，则返回一个负整数；如果当前字符串大于另一个字符串，则返回一个正整数。
    - 使用方法：可以通过传入两个字符串作为参数来调用compare()函数。
    - 使用案例：例如，compare("Hello", "World")将返回一个负整数。

11. copy()
    - 功能：将字符串的一部分复制到另一个字符串中。
    - 详解：该函数将字符串的一部分复制到另一个字符串中，并返回被复制的字符串。
    - 使用方法：可以通过传入要复制的字符串、要复制的起始位置和要复制的字符数作为参数来调用copy()函数。
    - 使用案例：例如，copy("Hello", buffer, 3)将复制字符串"Hel"到buffer中。

12. c_str()
    - 功能：返回一个指向以null结尾的字符数组的指针。
    - 详解：该函数返回一个指向以null结尾的字符数组的指针，该字符数组与字符串的内容相同。
    - 使用方法：可以通过调用c_str()函数来获取一个指向以null结尾的字符数组的指针。
    - 使用案例：例如，c_str("Hello")将返回一个指向字符数组的指针。

13. data()
    - 功能：返回一个指向字符串的第一个字符的指针。
    - 详解：该函数返回一个指向字符串的第一个字符的指针。
    - 使用方法：可以通过调用data()函数来获取一个指向字符串的第一个字符的指针。
    - 使用案例：例如，data("Hello")将返回一个指向字符'H'的指针。

14. empty()
    - 功能：检查字符串是否为空。
    - 详解：该函数检查字符串是否为空，如果字符串为空则返回true，否则返回false。
    - 使用方法：可以通过调用empty()函数来检查字符串是否为空。
    - 使用案例：例如，empty("Hello")将返回false。

15. end()
    - 功能：返回一个迭代器，指向字符串的末尾。
    - 详解：该函数返回一个迭代器，指向字符串的末尾。
    - 使用方法：可以通过调用end()函数来获取一个迭代器，指向字符串的末尾。
    - 使用案例：例如，end("Hello")将返回一个迭代器。

16. erase()
    - 功能：从字符串中删除指定范围的字符。
    - 详解：该函数从字符串中删除指定范围的字符，并返回删除后的字符串。
    - 使用方法：可以通过传入字符串、要删除的起始位置和要删除的字符数作为参数来调用erase()函数。
    - 使用案例：例如，erase("Hello", 1, 3)将返回字符串"Ho"。

17. find_first_not_of()
    - 功能：在字符串中查找第一个不在指定字符集中的字符。
    - 详解：该函数在字符串中查找第一个不在指定字符集中的字符，并返回其位置。
    - 使用方法：可以通过传入字符串和要查找的字符集作为参数来调用find_first_not_of()函数。
    - 使用案例：例如，find_first_not_of("Hello", "Helo")将返回位置2。

18. find_first_of()
    - 功能：在字符串中查找第一个在指定字符集中的字符。
    - 详解：该函数在字符串中查找第一个在指定字符集中的字符，并返回其位置。
    - 使用方法：可以通过传入字符串和要查找的字符集作为参数来调用find_first_of()函数。
    - 使用案例：例如，find_first_of("Hello", "ol")将返回位置2。

19. find_last_not_of()
    - 功能：在字符串中查找最后一个不在指定字符集中的字符。
    - 详解：该函数在字符串中查找最后一个不在指定字符集中的字符，并返回其位置。
    - 使用方法：可以通过传入字符串和要查找的字符集作为参数来调用find_last_not_of()函数。
    - 使用案例：例如，find_last_not_of("Hello", "Helo")将返回位置3。

20. find_last_of()
    - 功能：在字符串中查找最后一个在指定字符集中的字符。
    - 详解：该函数在字符串中查找最后一个在指定字符集中的字符，并返回其位置。
    - 使用方法：可以通过传入字符串和要查找的字符集作为参数来调用find_last_of()函数。
    - 使用案例：例如，find_last_of("Hello", "ol")将返回位置4。

21. front()
    - 功能：返回字符串的第一个字符。
    - 详解：该函数返回字符串的第一个字符。
    - 使用方法：可以通过调用front()函数来获取字符串的第一个字符。
    - 使用案例：例如，front("Hello")将返回字符'H'。

22. insert()
    - 功能：在字符串的指定位置插入字符或字符串。
    - 详解：该函数在字符串的指定位置插入字符或字符串，并返回插入后的字符串。
    - 使用方法：可以通过传入字符串、要插入的位置和要插入的字符或字符串作为参数来调用insert()函数。
    - 使用案例：例如，insert("Hello", 1, "i")将返回字符串"Hiello"。

23. length()
    - 功能：返回字符串的长度。
    - 详解：该函数返回字符串的长度。
    - 使用方法：可以通过调用length()函数来获取字符串的长度。
    - 使用案例：例如，length("Hello")将返回整数5。

24. replace()
    - 功能：用新的字符或字符串替换字符串中的一部分。
    - 详解：该函数用新的字符或字符串替换字符串中的一部分，并返回替换后的字符串。
    - 使用方法：可以通过传入字符串、要替换的起始位置、要替换的字符数和要替换的新字符或字符串作为参数来调用replace()函数。
    - 使用案例：例如，replace("Hello", 1, 3, "i")将返回字符串"Hi"。

25. reserve()
    - 功能：预留字符串的存储空间。
    - 详解：该函数预留字符串的存储空间，以便将来可以容纳更多的字符。
    - 使用方法：可以通过传入要预留的存储空间大小作为参数来调用reserve()函数。
    - 使用案例：例如，reserve("Hello", 10)将预留10个字符的存储空间。

26. resize()
    - 功能：改变字符串的长度。
    - 详解：该函数改变字符串的长度，并根据需要添加或删除字符。
    - 使用方法：可以通过传入要改变的长度作为参数来调用resize()函数。
    - 使用案例：例如，resize("Hello", 3)将返回字符串"Hel"。

27. substr()
    - 功能：返回字符串的子串。
    - 详解：该函数返回字符串的子串，即从指定位置开始的一部分字符。
    - 使用方法：可以通过传入字符串、子串的起始位置和子串的长度作为参数来调用substr()函数。
    - 使用案例：例如，substr("Hello", 1, 3)将返回字符串"ell"。

28. swap()
    - 功能：交换两个字符串的内容。
    - 详解：该函数交换两个字符串的内容。
    - 使用方法：可以通过传入另一个字符串作为参数来调用swap()函数。
    - 使用案例：例如，swap("Hello", "World")将交换两个字符串的内容。
29. reverse()
    - 功能：反转字符串的顺序。
    - 详解：该函数将字符串中的字符顺序进行反转。
    - 使用方法：可以通过调用reverse()函数来反转字符串的顺序。
    - 使用案例：例如，reverse("Hello")将返回字符串"olleH"。

30. swap_ranges()
    - 功能：交换两个字符串范围的内容。
    - 详解：该函数交换两个字符串范围的内容，即将一部分字符从一个字符串移到另一个字符串中。
    - 使用方法：可以通过传入两个字符串的起始位置和长度作为参数来调用swap_ranges()函数。
    - 使用案例：例如，swap_ranges("Hello", "World", 1, 3)将交换两个字符串范围的内容。

31. reverse_copy()
    - 功能：将字符串的反转拷贝到另一个字符串中。
    - 详解：该函数将字符串中的字符顺序进行反转，并将结果拷贝到另一个字符串中。
    - 使用方法：可以通过传入源字符串和目标字符串作为参数来调用reverse_copy()函数。
    - 使用案例：例如，reverse_copy("Hello", "olleH")将将字符串的反转拷贝到另一个字符串中。

32. std::reverse_iterator
    - 功能：用于反向遍历字符串。
    - 详解：std::reverse_iterator是一个迭代器，用于反向遍历字符串中的字符。
    - 使用方法：可以通过创建std::reverse_iterator对象，并使用它来遍历字符串中的字符。
    - 使用案例：例如，使用std::reverse_iterator可以从字符串的末尾开始遍历字符。
*/
